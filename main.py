import os
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters
from db import init_db, add_recipe, get_random_recipe

BOT_TOKEN = os.environ['BOT_TOKEN']
ADMIN_IDS = [int(x) for x in os.environ.get('ADMIN_IDS', '').split(',')]

init_db()

user_state = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ö–æ–º–∞–Ω–¥—ã:\n/recipe ‚Äî —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç\n/recipe –º—è—Å–æ ‚Äî –ø–æ —Ç–µ–≥—É/–∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n/add ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)")

async def recipe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = ' '.join(context.args) if context.args else None
    r = get_random_recipe(query)
    if not r:
        await update.message.reply_text("–†–µ—Ü–µ–ø—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    title, time, category, tags, desc = r
    await update.message.reply_text(
        f"üçΩ *{title}* ({time})\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n–¢–µ–≥–∏: {tags}\n\n{desc}",
        parse_mode='Markdown'
    )

async def add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if uid not in ADMIN_IDS:
        await update.message.reply_text("–¢—ã –Ω–µ –∞–¥–º–∏–Ω.")
        return
    user_state[uid] = {'step': 0, 'data': {}}
    await update.message.reply_text("–ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞?")

async def handle_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if uid not in user_state:
        return
    text = update.message.text
    state = user_state[uid]

    if state['step'] == 0:
        state['data']['title'] = text
        state['step'] += 1
        await update.message.reply_text("–í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è?")
    elif state['step'] == 1:
        state['data']['time'] = text
        state['step'] += 1
        await update.message.reply_text("–ö–∞—Ç–µ–≥–æ—Ä–∏—è? (–∑–∞–≤—Ç—Ä–∞–∫, –æ–±–µ–¥, —É–∂–∏–Ω)")
    elif state['step'] == 2:
        state['data']['category'] = text.lower()
        state['step'] += 1
        await update.message.reply_text("–¢–µ–≥–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):")
    elif state['step'] == 3:
        state['data']['tags'] = [t.strip() for t in text.lower().split(',')]
        state['step'] += 1
        await update.message.reply_text("–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:")
    elif state['step'] == 4:
        state['data']['description'] = text
        add_recipe(state['data'])
        del user_state[uid]
        await update.message.reply_text("‚úÖ –†–µ—Ü–µ–ø—Ç –¥–æ–±–∞–≤–ª–µ–Ω!")

app = ApplicationBuilder().token(BOT_TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("recipe", recipe))
app.add_handler(CommandHandler("add", add))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_input))
app.run_polling()
